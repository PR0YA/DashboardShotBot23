import logging
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from config import TELEGRAM_TOKEN, logger
from services.screenshot_service import ScreenshotService
from services.image_enhancer import ImageEnhancer
import io
import os
import signal
import sys
import psutil

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
screenshot_service = ScreenshotService()
image_enhancer = ImageEnhancer()

def is_bot_already_running() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –±–æ—Ç"""
    current_pid = os.getpid()

    for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
        try:
            if proc.pid != current_pid and 'python' in proc.name().lower():
                cmdline = ' '.join(proc.cmdline())
                if 'main.py' in cmdline:
                    return True
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
    return False

def cleanup_processes():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–∞"""
    if is_bot_already_running():
        logger.error("Another bot instance is already running")
        sys.exit(1)

    pid = str(os.getpid())
    with open('bot.pid', 'w') as f:
        f.write(pid)
    logger.info(f"Started new bot process with PID: {pid}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "üéØ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Dashboard Screenshot Bot\!*\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã Google Sheets —Ç–∞–±–ª–∏—Ü\.\n\n"
        "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "üì∏ /screenshot \- –°–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç\n"
        "üñº /format \- –í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
        "‚ùì /help \- –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É",
        parse_mode='MarkdownV2'
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await update.message.reply_text(
        "üìã *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*\n\n"
        "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "üî∏ /start \- –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
        "üî∏ /screenshot \- –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞\n"
        "üî∏ /format \- –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n\n"
        "*–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:*\n"
        "‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: 2440x2000\n"
        "‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: 100%\n"
        "‚Ä¢ –ó–∞—Ö–≤–∞—Ç: –ü–æ–ª–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞\n\n"
        "*–§–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:*\n"
        "‚Ä¢ PNG \- –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ\n"
        "‚Ä¢ JPEG \- –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä\n"
        "‚Ä¢ WebP \- –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç",
        parse_mode='MarkdownV2'
    )

async def format_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞"""
    keyboard = []
    for fmt, desc in screenshot_service.get_format_options().items():
        keyboard.append([InlineKeyboardButton(desc, callback_data=f"format_{fmt}")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "*–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:*",
        reply_markup=reply_markup,
        parse_mode='MarkdownV2'
    )

async def handle_format_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞"""
    query = update.callback_query
    await query.answer()

    format_type = query.data.split('_')[1]
    context.user_data['format'] = format_type

    await query.edit_message_text(
        f"–§–æ—Ä–º–∞—Ç *{format_type.upper()}* –≤—ã–±—Ä–∞–Ω\!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /screenshot –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞",
        parse_mode='MarkdownV2'
    )

async def screenshot_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
    format_type = context.user_data.get('format', 'png')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    message = await update.message.reply_text(
        "üîÑ *–°–æ–∑–¥–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç\.\.\.* \n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ",
        parse_mode='MarkdownV2'
    )

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        screenshot_data = await screenshot_service.get_screenshot(format_type)

        if not screenshot_data:
            await message.edit_text(
                "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞*\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                parse_mode='MarkdownV2'
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
        keyboard = [[InlineKeyboardButton("‚ú® –£–ª—É—á—à–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="enhance")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await update.message.reply_document(
            document=io.BytesIO(screenshot_data),
            filename=f"screenshot.{format_type}",
            caption=(
                "‚úÖ *–°–∫—Ä–∏–Ω—à–æ—Ç –≥–æ—Ç–æ–≤\!*\n\n"
                "*–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:*\n"
                f"‚Ä¢ –§–æ—Ä–º–∞—Ç: {format_type.upper()}\n"
                "‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: 2440x2000\n"
                "‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: 100%\n"
                "‚Ä¢ –†–µ–∂–∏–º: –ü–æ–ª–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
            ),
            parse_mode='MarkdownV2',
            reply_markup=reply_markup
        )

        await message.delete()

    except Exception as e:
        logger.error(f"Error creating screenshot: {e}")
        await message.edit_text(
            "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞*\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
            parse_mode='MarkdownV2'
        )

async def handle_enhancement(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ª—É—á—à–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
        file_id = query.message.document.file_id
        file = await context.bot.get_file(file_id)
        file_data = await file.download_as_bytearray()

        # –£–ª—É—á—à–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        enhanced_data = await image_enhancer.enhance_image(file_data)

        if not enhanced_data:
            await query.edit_message_text(
                "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è*",
                parse_mode='MarkdownV2'
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await query.message.reply_document(
            document=io.BytesIO(enhanced_data),
            filename="screenshot_enhanced.png",
            caption=(
                "‚ú® *–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–æ\!*\n\n"
                "*–ü—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:*\n"
                "‚Ä¢ –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç\n"
                "‚Ä¢ –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è —Ä–µ–∑–∫–æ—Å—Ç—å\n"
                "‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤"
            ),
            parse_mode='MarkdownV2'
        )

    except Exception as e:
        logger.error(f"Error enhancing image: {e}")
        await query.edit_message_text(
            "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è*",
            parse_mode='MarkdownV2'
        )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        cleanup_processes()

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(TELEGRAM_TOKEN).build()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("format", format_command))
        application.add_handler(CommandHandler("screenshot", screenshot_command))

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback
        application.add_handler(CallbackQueryHandler(handle_format_selection, pattern="^format_"))
        application.add_handler(CallbackQueryHandler(handle_enhancement, pattern="^enhance$"))

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("Starting bot...")
        application.run_polling(allowed_updates=Update.ALL_TYPES)

    except Exception as e:
        logger.error(f"Error starting bot: {e}")
        if os.path.exists('bot.pid'):
            os.remove('bot.pid')
        sys.exit(1)

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
        if os.path.exists('bot.pid'):
            os.remove('bot.pid')
    except Exception as e:
        logger.error(f"Error starting bot: {e}")
        if os.path.exists('bot.pid'):
            os.remove('bot.pid')