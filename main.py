import logging
from telegram import Update, ParseMode
from telegram.ext import Updater, CommandHandler, CallbackContext
from services.screenshot import ScreenshotService
from services.error_handler import ErrorHandler
from services.bot_metrics import BotMetrics

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
TELEGRAM_TOKEN = "7770923655:AAHcyQiCKWSYKRB9JfxsD9wMSAutdyCz9NQ"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
screenshot_service = ScreenshotService()
bot_metrics = BotMetrics()
error_handler = ErrorHandler(bot_metrics)

def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DashboardSJ Bot!\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –≤–∞—à–∏—Ö Google Sheets —Ç–∞–±–ª–∏—Ü "
            "—Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —É–ª—É—á—à–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n\n"
            "üîπ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /screenshot –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞\n"
            "üîπ /help - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥\n"
            "üîπ /status - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞"
        )
        logger.info(f"Start command handled for user {update.effective_user.id}")
    except Exception as e:
        error_message = error_handler.handle_error(e, {'update': update, 'command': 'start'})
        update.message.reply_text(error_message)

def help(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    try:
        update.message.reply_text(
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
            "/screenshot - –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–∞–±–ª–∏—Ü—ã\n"
            "\n–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /screenshot"
        )
        logger.info(f"Help command handled for user {update.effective_user.id}")
    except Exception as e:
        error_message = error_handler.handle_error(e, {'update': update, 'command': 'help'})
        update.message.reply_text(error_message)

def status(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    try:
        stats = bot_metrics.get_performance_stats()
        status_message = (
            "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–æ–º–∞–Ω–¥: {stats.get('commands', {}).get('total_executed', 0)}\n"
            f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats.get('commands', {}).get('success_rate', 100)}%\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {stats.get('commands', {}).get('average_time', 0)}—Å"
        )
        update.message.reply_text(status_message)
        logger.info(f"Status command handled for user {update.effective_user.id}")
    except Exception as e:
        error_message = error_handler.handle_error(e, {'update': update, 'command': 'status'})
        update.message.reply_text(error_message)

def screenshot(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /screenshot"""
    start_time = bot_metrics.start_command_tracking("screenshot")
    try:
        update.message.reply_text("üîÑ –°–æ–∑–¥–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–∞–±–ª–∏—Ü—ã...")

        # –ü–æ–ª—É—á–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        screenshot_data = screenshot_service.get_screenshot(
            format='png',
            enhance=True,
            preset='high_contrast'
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        update.message.reply_document(
            document=screenshot_data,
            filename='screenshot.png',
            caption='üìä –°–∫—Ä–∏–Ω—à–æ—Ç —Ç–∞–±–ª–∏—Ü—ã –≥–æ—Ç–æ–≤!'
        )

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
        bot_metrics.end_command_tracking("screenshot", start_time, success=True)
        logger.info(f"Screenshot created for user {update.effective_user.id}")

    except Exception as e:
        bot_metrics.end_command_tracking("screenshot", start_time, success=False)
        error_message = error_handler.handle_error(e, {
            'user_id': update.effective_user.id,
            'command': 'screenshot'
        })
        update.message.reply_text(error_message)

def error_callback(update: Update, context: CallbackContext) -> None:
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    try:
        if update and update.effective_message:
            error_message = error_handler.handle_error(context.error, {
                'update': update,
                'context': context
            })
            update.effective_message.reply_text(error_message)
        else:
            logger.error(f"Error occurred: {context.error}")
    except Exception as e:
        logger.error(f"Error in error handler: {e}")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º Updater
        updater = Updater(TELEGRAM_TOKEN)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        dp = updater.dispatcher

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        dp.add_handler(CommandHandler("start", start))
        dp.add_handler(CommandHandler("help", help))
        dp.add_handler(CommandHandler("status", status))
        dp.add_handler(CommandHandler("screenshot", screenshot))

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        dp.add_error_handler(error_callback)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("Starting bot...")
        updater.start_polling()
        updater.idle()

    except Exception as e:
        logger.error(f"Critical error in main: {e}")
        raise

if __name__ == '__main__':
    main()