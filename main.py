import asyncio
import os
import sys
import signal
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ConversationHandler
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from config import TELEGRAM_TOKEN
from services.screenshot import ScreenshotService
from utils.logger import logger
import io
import psutil

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
CHOOSING_FORMAT, CHOOSING_ZOOM, SELECTING_AREA, CHOOSING_PRESET, PREVIEW_AREA, CONFIRMING = range(6)

# –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
PROGRESS_EMOJI = ["‚è≥", "‚åõÔ∏è"]

def get_running_bot_processes():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–∞"""
    try:
        import psutil
        bot_processes = []
        logger.info(f"Searching for bot processes... Current PID: {os.getpid()}")

        for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
            try:
                cmdline = ' '.join(proc.info['cmdline'] or [])
                if 'python' in proc.info['name'].lower() and 'main.py' in cmdline:
                    bot_processes.append(proc)
                    logger.info(f"Found bot process: PID={proc.pid}, CMD={cmdline}")
            except (psutil.NoSuchProcess, psutil.AccessDenied) as e:
                logger.warning(f"Could not access process: {e}")
                continue

        logger.info(f"Found {len(bot_processes)} bot processes")
        return bot_processes
    except ImportError:
        logger.error("psutil not available")
        return []

def cleanup_old_processes():
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞"""
    current_pid = os.getpid()
    logger.info(f"Starting cleanup of old processes. Current PID: {current_pid}")

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–∞—Ö
    virtual_memory = psutil.virtual_memory()
    cpu_percent = psutil.cpu_percent(interval=1)
    logger.info(f"System resources - Memory: {virtual_memory.percent}%, CPU: {cpu_percent}%")

    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –≤—Å–µ PID —Ñ–∞–π–ª—ã
        if os.path.exists("bot.pid"):
            try:
                os.remove("bot.pid")
                logger.info("Removed existing PID file")
            except Exception as e:
                logger.error(f"Error removing PID file: {e}")

        # –ò—â–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞
        for proc in get_running_bot_processes():
            if proc.pid != current_pid:
                try:
                    logger.info(f"Attempting to terminate process {proc.pid}")

                    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –º—è–≥–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                    proc.terminate()
                    try:
                        proc.wait(timeout=5)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
                        logger.info(f"Process {proc.pid} terminated successfully")
                    except psutil.TimeoutExpired:
                        logger.warning(f"Timeout waiting for process {proc.pid} to terminate, using SIGKILL")
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –º—è–≥–∫–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º SIGKILL
                        os.kill(proc.pid, signal.SIGKILL)
                        # –ñ–¥–µ–º –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                        try:
                            proc.wait(timeout=3)
                            logger.info(f"Process {proc.pid} killed successfully")
                        except psutil.TimeoutExpired:
                            logger.error(f"Failed to kill process {proc.pid}")

                except psutil.NoSuchProcess:
                    logger.info(f"Process {proc.pid} already terminated")
                except Exception as e:
                    logger.error(f"Error handling process {proc.pid}: {e}")

    except Exception as e:
        logger.error(f"Error in cleanup_old_processes: {e}")
        raise

def is_bot_running():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –±–æ—Ç"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π PID
        current_pid = os.getpid()
        logger.info(f"Checking if bot is already running... Current PID: {current_pid}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞
        running_processes = get_running_bot_processes()

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
        other_processes = [p for p in running_processes if p.pid != current_pid]

        if other_processes:
            for proc in other_processes:
                try:
                    cmdline = ' '.join(proc.cmdline())
                    logger.warning(f"Found another bot instance: PID={proc.pid}, CMD={cmdline}")
                except (psutil.NoSuchProcess, psutil.AccessDenied) as e:
                    logger.error(f"Error accessing process {proc.pid}: {e}")
                    continue
            return True

        logger.info("No other bot instances found")
        return False

    except Exception as e:
        logger.error(f"Error in is_bot_running: {e}")
        return False

def save_pid():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç PID —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    try:
        pid = os.getpid()
        with open("bot.pid", 'w') as f:
            f.write(str(pid))
        logger.info(f"Saved PID file with PID: {pid}")
    except Exception as e:
        logger.error(f"Error saving PID file: {e}")

def remove_pid():
    """–£–¥–∞–ª—è–µ—Ç PID —Ñ–∞–π–ª"""
    try:
        os.remove("bot.pid")
        logger.info("Successfully removed PID file")
    except Exception as e:
        logger.error(f"Error removing PID file: {e}")

class DashboardBot:
    def __init__(self):
        self.screenshot_service = ScreenshotService()
        self.progress_tasks = {}

    async def animate_progress(self, message, text_template):
        """–ê–Ω–∏–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ"""
        i = 0
        while True:
            try:
                await message.edit_text(
                    text_template.format(emoji=PROGRESS_EMOJI[i % 2]),
                    parse_mode='MarkdownV2'
                )
                i += 1
                await asyncio.sleep(1)
            except Exception:
                break

    async def start_progress_animation(self, message, text_template):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        task = asyncio.create_task(self.animate_progress(message, text_template))
        self.progress_tasks[message.message_id] = task
        return message

    async def stop_progress_animation(self, message_id):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        if message_id in self.progress_tasks:
            self.progress_tasks[message_id].cancel()
            del self.progress_tasks[message_id]

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞"""
        help_text = """
*DashboardSJ Bot \- –°–ø—Ä–∞–≤–∫–∞* ü§ñ

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start \- –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
/help \- –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/settings \- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
/status \- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
/cache - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞

*–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:*
1\. –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ \(PNG/JPEG/WebP\)
2\. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Å—à—Ç–∞–±–∞ \(50\-200%\)
3\. –í—ã–±–æ—Ä –æ–±–ª–∞—Å—Ç–∏
4\. –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
5\. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π
6\. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ

*–û–±–ª–∞—Å—Ç–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:*
‚Ä¢ –í–µ—Å—å –¥–∞—à–±–æ—Ä–¥
‚Ä¢ –¢–æ–ª—å–∫–æ –º–µ—Ç—Ä–∏–∫–∏
‚Ä¢ –¢–æ–ª—å–∫–æ –≥—Ä–∞—Ñ–∏–∫–∏

*–ü—Ä–µ—Å–µ—Ç—ã —É–ª—É—á—à–µ–Ω–∏—è:*
‚Ä¢ Default \- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
‚Ä¢ High Contrast \- –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç
‚Ä¢ Text Optimal \- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
‚Ä¢ Chart Optimal \- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤

*–°–æ–≤–µ—Ç—ã:*
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–ª–∞—Å—Ç–∏
‚Ä¢ –í—ã–±–∏—Ä–∞–π—Ç–µ –ø—Ä–µ—Å–µ—Ç—ã –ø–æ–¥ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚Ä¢ –ü—Ä–∏ –æ—à–∏–±–∫–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
"""
        await update.message.reply_text(help_text, parse_mode='MarkdownV2')

    async def settings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
        keyboard = [
            [InlineKeyboardButton("üñº –§–æ—Ä–º–∞—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", callback_data="settings_format")],
            [InlineKeyboardButton("üîç –ú–∞—Å—à—Ç–∞–± –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", callback_data="settings_zoom")],
            [InlineKeyboardButton("‚ú® –ü—Ä–µ—Å–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", callback_data="settings_preset")],
            [InlineKeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="settings_back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        settings_text = """
*–ù–∞—Å—Ç—Ä–æ–π–∫–∏ DashboardSJ Bot* ‚öôÔ∏è

–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
‚Ä¢ –§–æ—Ä–º–∞—Ç: PNG
‚Ä¢ –ú–∞—Å—à—Ç–∞–±: 100%
‚Ä¢ –ü—Ä–µ—Å–µ—Ç: Default

–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
"""
        await update.message.reply_text(settings_text, reply_markup=reply_markup, parse_mode='MarkdownV2')

    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
        services_status = {
            "Google Sheets API": "‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ",
            "–°–∫—Ä–∏–Ω—à–æ—Ç —Å–µ—Ä–≤–∏—Å": "‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ",
            "–£–ª—É—á—à–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π": "‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ"
        }

        status_text = """
*–°—Ç–∞—Ç—É—Å DashboardSJ Bot* üîç

*–°–µ—Ä–≤–∏—Å—ã:*
‚Ä¢ Google Sheets API: {sheets_status}
‚Ä¢ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–µ—Ä–≤–∏—Å: {screenshot_status}
‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {enhancement_status}

*–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:*
‚Ä¢ –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: ~2—Å
‚Ä¢ –ü–∞–º—è—Ç—å: –û–ø—Ç–∏–º–∞–ª—å–Ω–æ
‚Ä¢ –ö—ç—à: –ê–∫—Ç–∏–≤–µ–Ω

*–°–æ—Å—Ç–æ—è–Ω–∏–µ:* ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç
""".format(
            sheets_status=services_status["Google Sheets API"],
            screenshot_status=services_status["–°–∫—Ä–∏–Ω—à–æ—Ç —Å–µ—Ä–≤–∏—Å"],
            enhancement_status=services_status["–£–ª—É—á—à–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"]
        )

        await update.message.reply_text(status_text, parse_mode='MarkdownV2')

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        keyboard = [
            [
                InlineKeyboardButton("üì∏ PNG", callback_data="format_png"),
                InlineKeyboardButton("üñº JPEG", callback_data="format_jpeg"),
                InlineKeyboardButton("üåÖ WebP", callback_data="format_webp")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        welcome_text = """
ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DashboardSJ Bot\!*

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã Google Sheets.

*–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:*
1. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç
2. –£–∫–∞–∂–∏—Ç–µ –º–∞—Å—à—Ç–∞–± (50-200%)
3. –í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å (–∏–ª–∏ –≤–µ—Å—å –ª–∏—Å—Ç)
4. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ—Å–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è
5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–µ–≤—å—é
6. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ

–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ üëá
"""
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='MarkdownV2'
        )
        return CHOOSING_FORMAT

    async def format_chosen(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        format_type = query.data.split('_')[1]
        context.user_data['format'] = format_type

        keyboard = [
            [
                InlineKeyboardButton("50%", callback_data="zoom_50"),
                InlineKeyboardButton("100%", callback_data="zoom_100"),
                InlineKeyboardButton("150%", callback_data="zoom_150"),
                InlineKeyboardButton("200%", callback_data="zoom_200")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            f"–§–æ—Ä–º–∞—Ç {format_type.upper()} –≤—ã–±—Ä–∞–Ω.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—à—Ç–∞–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )
        return CHOOSING_ZOOM

    async def zoom_chosen(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        zoom = int(query.data.split('_')[1])
        context.user_data['zoom'] = zoom

        keyboard = [
            [
                InlineKeyboardButton("üìä –í–µ—Å—å dashboard", callback_data="area_full"),
                InlineKeyboardButton("üìà –¢–æ–ª—å–∫–æ –º–µ—Ç—Ä–∏–∫–∏", callback_data="area_metrics"),
                InlineKeyboardButton("üìâ –¢–æ–ª—å–∫–æ –≥—Ä–∞—Ñ–∏–∫–∏", callback_data="area_charts")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            f"–ú–∞—Å—à—Ç–∞–± {zoom}% –≤—ã–±—Ä–∞–Ω.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:",
            reply_markup=reply_markup
        )
        return SELECTING_AREA

    async def area_chosen(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        area_type = query.data.split('_')[1]
        areas = {
            'full': None,
            'metrics': {'x': 0, 'y': 0, 'width': 2440, 'height': 500},
            'charts': {'x': 0, 'y': 500, 'width': 2440, 'height': 1500}
        }
        context.user_data['area'] = areas[area_type]

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é
        status_message = await self.start_progress_animation(query.message, "üîÑ –°–æ–∑–¥–∞—é –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±–ª–∞—Å—Ç–∏... {}")

        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é —Å —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
            preview_params = context.user_data.copy()
            if preview_params['area']:
                preview_params['area'] = {
                    k: v // 2 for k, v in preview_params['area'].items()
                }

            preview_data = await self.screenshot_service.get_screenshot(
                format='jpeg',  # –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º JPEG –¥–ª—è –ø—Ä–µ–≤—å—é
                enhance=False,  # –±–µ–∑ —É–ª—É—á—à–µ–Ω–∏–π –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                zoom=context.user_data['zoom'],
                area=preview_params['area']
            )

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –∏ –æ–ø—Ü–∏–∏
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –û–±–ª–∞—Å—Ç—å –≤–µ—Ä–Ω–∞—è", callback_data="preview_ok"),
                    InlineKeyboardButton("üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é", callback_data="preview_change")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=io.BytesIO(preview_data),
                caption="–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏.\n–í—Å—ë –≤–µ—Ä–Ω–æ?",
                reply_markup=reply_markup
            )
            await self.stop_progress_animation(status_message.message_id)
            return PREVIEW_AREA

        except Exception as e:
            error_message = f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é: {str(e)}"
            logger.error(error_message)
            await self.stop_progress_animation(status_message.message_id)
            await status_message.edit_text(error_message)
            return ConversationHandler.END

    async def handle_preview(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        choice = query.data.split('_')[1]
        if choice == 'change':
            keyboard = [
                [
                    InlineKeyboardButton("üìä –í–µ—Å—å dashboard", callback_data="area_full"),
                    InlineKeyboardButton("üìà –¢–æ–ª—å–∫–æ –º–µ—Ç—Ä–∏–∫–∏", callback_data="area_metrics"),
                    InlineKeyboardButton("üìâ –¢–æ–ª—å–∫–æ –≥—Ä–∞—Ñ–∏–∫–∏", callback_data="area_charts")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –æ–±–ª–∞—Å—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:",
                reply_markup=reply_markup
            )
            return SELECTING_AREA
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã
            presets = self.screenshot_service.get_available_presets()
            keyboard = [[InlineKeyboardButton(preset.replace('_', ' ').title(),
                                               callback_data=f"preset_{preset}")]
                        for preset in presets]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                "–û–±–ª–∞—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ—Å–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
                reply_markup=reply_markup
            )
            return CHOOSING_PRESET

    async def preset_chosen(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        preset = query.data.split('_')[1]
        context.user_data['preset'] = preset

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        status_message = await self.start_progress_animation(query.message, "üîÑ –°–æ–∑–¥–∞—é —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç... {}")

        try:
            screenshot_data = await self.screenshot_service.get_screenshot(
                format=context.user_data['format'],
                enhance=True,
                zoom=context.user_data['zoom'],
                area=context.user_data['area'],
                preset=preset
            )

            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="confirm_save"),
                    InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="confirm_restart")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=io.BytesIO(screenshot_data),
                caption=f"–ì–æ—Ç–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç:\n–§–æ—Ä–º–∞—Ç: {context.user_data['format'].upper()}\n"
                        f"–ú–∞—Å—à—Ç–∞–±: {context.user_data['zoom']}%\n"
                        f"–ü—Ä–µ—Å–µ—Ç: {preset}",
                reply_markup=reply_markup
            )
            await self.stop_progress_animation(status_message.message_id)
            return CONFIRMING

        except Exception as e:
            error_message = f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {str(e)}"
            logger.error(error_message)
            await self.stop_progress_animation(status_message.message_id)
            await status_message.edit_text(error_message)
            return ConversationHandler.END

    async def handle_confirmation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        action = query.data.split('_')[1]
        if action == 'restart':
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DashboardSJ Bot\!*\n\n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã Google Sheets.\n\n*–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:*\n1. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç\n2. –£–∫–∞–∂–∏—Ç–µ –º–∞—Å—à—Ç–∞–± (50-200%)\n3. –í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å (–∏–ª–∏ –≤–µ—Å—å –ª–∏—Å—Ç)\n4. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ—Å–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è\n5. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ üëá",
                reply_markup=InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("üì∏ PNG", callback_data="format_png"),
                        InlineKeyboardButton("üñº JPEG", callback_data="format_jpeg"),
                        InlineKeyboardButton("üåÖ WebP", callback_data="format_webp")
                    ]
                ]),
                parse_mode='MarkdownV2'
            )
            return CHOOSING_FORMAT
        else:
            try:
                screenshot_data = await self.screenshot_service.get_screenshot(
                    format=context.user_data['format'],
                    enhance=True,
                    zoom=context.user_data['zoom'],
                    area=context.user_data['area'],
                    preset=context.user_data['preset']
                )

                await context.bot.send_document(
                    chat_id=query.message.chat_id,
                    document=io.BytesIO(screenshot_data),
                    filename=f"dashboard_{context.user_data['format']}.{context.user_data['format']}",
                    caption="‚úÖ –ì–æ—Ç–æ–≤–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞."
                )
                return ConversationHandler.END

            except Exception as e:
                error_message = f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}"
                logger.error(error_message)
                await query.edit_message_text(error_message)
                return ConversationHandler.END

    async def cache_stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞"""
        stats = self.screenshot_service.get_cache_stats()

        stats_text = f"""
*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞* üìä

*–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:*
‚Ä¢ –ü–æ–ø–∞–¥–∞–Ω–∏—è: {stats['cache_hits']}
‚Ä¢ –ü—Ä–æ–º–∞—Ö–∏: {stats['cache_misses']}
‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats['hit_rate']}%

*–û–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö:*
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {stats['mb_saved']} MB
‚Ä¢ –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: {stats['total_cache_size_mb']} MB
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {stats['cache_utilization']}%

*–ó–∞–ø–∏—Å–∏:*
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {stats['cache_entries']}
"""
        await update.message.reply_text(stats_text, parse_mode='MarkdownV2')


    async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        error = context.error
        logger.error(f"Exception while handling an update: {error}")

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
        current_pid = os.getpid()
        process_info = f"Current PID: {current_pid}"

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö –±–æ—Ç–∞
            other_processes = [p for p in get_running_bot_processes() if p.pid != current_pid]
            if other_processes:
                process_info += "\nOther bot processes found:"
                for proc in other_processes:
                    try:
                        cmdline = ' '.join(proc.cmdline())
                        process_info += f"\n- PID={proc.pid}, CMD={cmdline}"
                    except (psutil.NoSuchProcess, psutil.AccessDenied):
                        process_info += f"\n- PID={proc.pid} (inaccessible)"
            logger.error(f"Process state when error occurred: {process_info}")
        except Exception as e:
            logger.error(f"Error getting process information: {e}")

        if "Conflict: terminated by other getUpdates request" in str(error):
            logger.error(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç: –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ\n{process_info}")
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
            try:
                cleanup_old_processes()
            except Exception as e:
                logger.error(f"Error cleaning up processes after conflict: {e}")
            return

        if update and isinstance(update, Update) and update.effective_message:
            await update.effective_message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def run(self):
        try:
            application = Application.builder().token(TELEGRAM_TOKEN).build()

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
            application.add_handler(CommandHandler("help", self.help_command))
            application.add_handler(CommandHandler("settings", self.settings_command))
            application.add_handler(CommandHandler("status", self.status_command))
            application.add_handler(CommandHandler("cache", self.cache_stats_command))

            # –î–æ–±–∞–≤–ª—è–µ–º conversation handler
            screenshot_handler = ConversationHandler(
                entry_points=[CommandHandler("start", self.start)],
                states={
                    CHOOSING_FORMAT: [CallbackQueryHandler(self.format_chosen, pattern=r"^format_")],
                    CHOOSING_ZOOM: [CallbackQueryHandler(self.zoom_chosen, pattern=r"^zoom_")],
                    SELECTING_AREA: [CallbackQueryHandler(self.area_chosen, pattern=r"^area_")],
                    PREVIEW_AREA: [CallbackQueryHandler(self.handle_preview, pattern=r"^preview_")],
                    CHOOSING_PRESET: [CallbackQueryHandler(self.preset_chosen, pattern=r"^preset_")],
                    CONFIRMING: [CallbackQueryHandler(self.handle_confirmation, pattern=r"^confirm_")]
                },
                fallbacks=[CommandHandler("start", self.start)]
            )

            application.add_handler(screenshot_handler)
            application.add_error_handler(self.error_handler)

            logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
            memory = psutil.virtual_memory()
            cpu = psutil.cpu_percent(interval=1)
            if memory.percent > 90 or cpu > 80:
                logger.warning(f"High system load detected - Memory: {memory.percent}%, CPU: {cpu}%")

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            await asyncio.sleep(2)

            # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            await application.initialize()
            await application.start()
            await application.run_polling(allowed_updates=Update.ALL_TYPES, drop_pending_updates=True)

        except Exception as e:
            logger.error(f"Error running bot: {str(e)}")
            # Ensure proper shutdown
            try:
                await application.stop()
                await application.shutdown()
            except Exception as shutdown_error:
                logger.error(f"Error during shutdown: {str(shutdown_error)}")
            raise

if __name__ == '__main__':
    try:
        logger.info("Starting bot initialization...")

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        cleanup_old_processes()

        # –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
        if is_bot_running():
            logger.error("Bot is still running after cleanup. Stopping.")
            sys.exit(1)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º PID —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
        save_pid()

        logger.info("Bot initialization completed successfully")

        bot = DashboardBot()
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            loop.run_until_complete(bot.run())
        finally:
            loop.close()

    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Critical error: {str(e)}")
    finally:
        remove_pid()