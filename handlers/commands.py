import logging
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode

from states.dialog import ScreenshotDialog
from keyboards.inline import KeyboardFactory
from services.screenshot import ScreenshotService
from services.image_enhancer import ImageEnhancer

logger = logging.getLogger(__name__)
router = Router()
screenshot_service = ScreenshotService()
image_enhancer = ImageEnhancer()

# –§–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è
IMAGE_FORMATS = {
    'png': 'PNG - –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é',
    'jpeg': 'JPEG - –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä',
    'webp': 'WebP - –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç'
}

@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    logger.info(f"User {message.from_user.id} started the bot")
    await message.answer(
        "üéØ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Dashboard Screenshot Bot!*\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã Google Sheets —Ç–∞–±–ª–∏—Ü.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/screenshot - –°–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç\n"
        "/formats - –í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
        parse_mode=ParseMode.MARKDOWN_V2
    )

@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    logger.info(f"User {message.from_user.id} requested help")
    await message.answer(
        "üìã *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*\n\n"
        "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "üî∏ /start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
        "üî∏ /screenshot - –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞\n"
        "üî∏ /formats - –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n\n"
        "*–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:*\n"
        "‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: 2440x2000\n"
        "‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: 100%\n"
        "‚Ä¢ –ó–∞—Ö–≤–∞—Ç: –ü–æ–ª–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞\n\n"
        "*–§–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:*\n"
        "‚Ä¢ PNG - –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ\n"
        "‚Ä¢ JPEG - –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä\n"
        "‚Ä¢ WebP - –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç",
        parse_mode=ParseMode.MARKDOWN_V2
    )

@router.message(Command("formats"))
async def cmd_formats(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /formats"""
    logger.info(f"User {message.from_user.id} requested format selection")
    keyboard = KeyboardFactory.format_selection(IMAGE_FORMATS)
    await message.answer(
        "üñº *–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:*",
        reply_markup=keyboard.as_markup(),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await state.set_state(ScreenshotDialog.choosing_format)

@router.message(Command("screenshot"))
async def cmd_screenshot(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /screenshot"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ñ–æ—Ä–º–∞—Ç–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    format_type = data.get('format', 'png')

    logger.info(f"User {message.from_user.id} requested screenshot in format: {format_type}")

    try:
        # –°–æ–æ–±—â–∞–µ–º –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
        processing_message = await message.answer(
            "üîÑ *–°–æ–∑–¥–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç...*\n"
            "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ",
            parse_mode=ParseMode.MARKDOWN_V2
        )

        # –ü–æ–ª—É—á–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        screenshot_data = screenshot_service.get_screenshot(
            format=format_type,
            quality=100
        )

        if screenshot_data:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            keyboard = KeyboardFactory.enhancement_keyboard()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
            await message.answer_document(
                document=screenshot_data,
                filename=f'screenshot.{format_type}',
                caption=(
                    "‚úÖ *–°–∫—Ä–∏–Ω—à–æ—Ç –≥–æ—Ç–æ–≤!*\n\n"
                    "*–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:*\n"
                    "üìè –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: 2440x2000\n"
                    "üíØ –ö–∞—á–µ—Å—Ç–≤–æ: 100%\n"
                    "üìÑ –†–µ–∂–∏–º: –ü–æ–ª–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
                ),
                parse_mode=ParseMode.MARKDOWN_V2,
                reply_markup=keyboard.as_markup()
            )
            await state.set_state(ScreenshotDialog.enhancing_image)
            logger.info(f"Screenshot successfully created and sent to user {message.from_user.id}")
        else:
            logger.error(f"Failed to create screenshot for user {message.from_user.id}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode=ParseMode.MARKDOWN_V2
            )

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
        await processing_message.delete()

    except Exception as e:
        logger.error(f"Error in screenshot command for user {message.from_user.id}: {str(e)}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.MARKDOWN_V2
        )