from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ParseMode

from services.screenshot import ScreenshotService
from services.image_enhancer import ImageEnhancer
import logging

logger = logging.getLogger(__name__)

router = Router()
screenshot_service = ScreenshotService()
image_enhancer = ImageEnhancer()

@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Screenshot Bot\!*\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã Google Sheets\.\n\n"
        "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "üì∏ /screenshot \- –°–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç\n"
        "üñº /format \- –í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç\n"
        "‚ùì /help \- –ü–æ–º–æ—â—å",
        parse_mode=ParseMode.MARKDOWN_V2
    )

@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await message.answer(
        "*–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*\n\n"
        "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "‚Ä¢ /start \- –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
        "‚Ä¢ /screenshot \- –°–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç\n"
        "‚Ä¢ /format \- –í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç\n\n"
        "*–§–æ—Ä–º–∞—Ç—ã:*\n"
        "‚Ä¢ PNG \- –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ\n"
        "‚Ä¢ JPEG \- –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä\n"
        "‚Ä¢ WebP \- –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç",
        parse_mode=ParseMode.MARKDOWN_V2
    )

@router.message(Command("format"))
async def cmd_format(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞"""
    keyboard = InlineKeyboardBuilder()
    formats = {
        'png': 'PNG - –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ',
        'jpeg': 'JPEG - –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä',
        'webp': 'WebP - –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç'
    }

    for fmt, desc in formats.items():
        keyboard.button(text=desc, callback_data=f"format_{fmt}")
    keyboard.adjust(1)

    await message.answer(
        "*–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:*",
        reply_markup=keyboard.as_markup(),
        parse_mode=ParseMode.MARKDOWN_V2
    )

@router.callback_query(lambda c: c.data.startswith("format_"))
async def process_format_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞"""
    format_type = callback.data.split("_")[1]
    await callback.answer(f"–í—ã–±—Ä–∞–Ω —Ñ–æ—Ä–º–∞—Ç: {format_type.upper()}")
    await callback.message.edit_text(
        f"–§–æ—Ä–º–∞—Ç *{format_type\.upper()}* –≤—ã–±—Ä–∞–Ω\!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /screenshot –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞",
        parse_mode=ParseMode.MARKDOWN_V2
    )

@router.message(Command("screenshot"))
async def cmd_screenshot(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    status_msg = await message.answer(
        "*–°–æ–∑–¥–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç\.\.\.*\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ",
        parse_mode=ParseMode.MARKDOWN_V2
    )

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        screenshot_data = await screenshot_service.get_screenshot()

        if not screenshot_data:
            await message.answer(
                "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞*\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚ú® –£–ª—É—á—à–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="enhance")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        await message.answer_document(
            document=screenshot_data,
            filename="screenshot.png",
            caption=(
                "‚úÖ *–°–∫—Ä–∏–Ω—à–æ—Ç –≥–æ—Ç–æ–≤\!*\n\n"
                "*–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:*\n"
                "‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: 2440x2000\n"
                "‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: 100%\n"
                "‚Ä¢ –†–µ–∂–∏–º: –ü–æ–ª–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
            ),
            parse_mode=ParseMode.MARKDOWN_V2,
            reply_markup=keyboard.as_markup()
        )

    except Exception as e:
        logger.error(f"Error creating screenshot: {e}")
        await message.answer(
            "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞*\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
            parse_mode=ParseMode.MARKDOWN_V2
        )
    finally:
        await status_msg.delete()

@router.callback_query(F.data == "enhance")
async def process_enhancement(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ª—É—á—à–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        await callback.message.edit_text(
            "*–£–ª—É—á—à–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\.\.\.*",
            parse_mode=ParseMode.MARKDOWN_V2
        )

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
        if not callback.message.document:
            await callback.message.edit_text(
                "‚ùå *–û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ*",
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        file = await callback.bot.get_file(callback.message.document.file_id)
        file_content = await callback.bot.download_file(file.file_path)

        # –£–ª—É—á—à–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        enhanced_data = await image_enhancer.enhance_screenshot(
            file_content.read(),
            clip_limit=1.2,
            sharpness=3.8
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await callback.message.answer_document(
            document=enhanced_data,
            filename="screenshot_enhanced.png",
            caption=(
                "‚ú® *–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–æ\!*\n\n"
                "*–ü—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:*\n"
                "‚Ä¢ –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç\n"
                "‚Ä¢ –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è —Ä–µ–∑–∫–æ—Å—Ç—å\n"
                "‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤"
            ),
            parse_mode=ParseMode.MARKDOWN_V2
        )

    except Exception as e:
        logger.error(f"Error enhancing image: {e}")
        await callback.message.edit_text(
            "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è*",
            parse_mode=ParseMode.MARKDOWN_V2
        )